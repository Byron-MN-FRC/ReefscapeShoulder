// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import static edu.wpi.first.units.Units.Amps;
import static edu.wpi.first.units.Units.Volts;

import com.ctre.phoenix6.StatusCode;
import com.ctre.phoenix6.StatusSignal;
import com.ctre.phoenix6.configs.TalonFXConfiguration;
import com.ctre.phoenix6.controls.NeutralOut;
import com.ctre.phoenix6.controls.PositionTorqueCurrentFOC;
import com.ctre.phoenix6.controls.PositionVoltage;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix6.hardware.TalonFX;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Shoulder extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    /* Start at position 0, use slot 0 */
    private final PositionVoltage m_positionVoltage = new PositionVoltage(0).withSlot(0);
    /* Start at position 0, use slot 1 */
    private final NeutralOut m_brake = new NeutralOut();
    private final PositionTorqueCurrentFOC m_positionTorque = new PositionTorqueCurrentFOC(0).withSlot(1);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private TalonFX kraken;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Shoulder() {
        kraken = new TalonFX(13, "CANivore1");
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

 
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        //Voltage
        TalonFXConfiguration configs = new TalonFXConfiguration();
        configs.Slot0.kP = Constants.Shoulder.P; // An error of 1 rotation results in 2.4 V output
        configs.Slot0.kI = Constants.Shoulder.I; // No output for integrated error
        configs.Slot0.kD = Constants.Shoulder.D; // A velocity of 1 rps results in 0.1 V output
        // Peak output of 8 V
        configs.Voltage.withPeakForwardVoltage(Volts.of(8))
        .withPeakReverseVoltage(Volts.of(-8));

        //Torque
        configs.Slot1.kP = Constants.Shoulder.P2; // An error of 1 rotation results in 60 A output
        configs.Slot1.kI = Constants.Shoulder.I2; // No output for integrated error
        configs.Slot1.kD = Constants.Shoulder.D2; // A velocity of 1 rps results in 6 A output
        // Peak output of 120 A
        configs.TorqueCurrent.withPeakForwardTorqueCurrent(Amps.of(120))
        .withPeakReverseTorqueCurrent(Amps.of(-120));

        //Config Saving
        /* Retry config apply up to 5 times, report if failure */
        StatusCode status = StatusCode.StatusCodeNotInitialized;
        for (int i = 0; i < 5; ++i) {
        status = kraken.getConfigurator().apply(configs);
        if (status.isOK()) break;
        }
        if (!status.isOK()) {
        System.out.println("Could not apply configs, error code: " + status.toString());
        }

        kraken.setPosition(0);
        SmartDashboard.putNumber("Kraken Position", kraken.getPosition().getValueAsDouble());
        if (kraken.getPosition().getValueAsDouble() >= Constants.Shoulder.PosMedium-Constants.Shoulder.Buffer && kraken.getPosition().getValueAsDouble() <= Constants.Shoulder.PosMedium+Constants.Shoulder.Buffer ? SmartDashboard.putBoolean("Medium Position", true) : SmartDashboard.putBoolean("Medium Position", false)) {} 
        if (kraken.getPosition().getValueAsDouble() >= Constants.Shoulder.PosHigh-Constants.Shoulder.Buffer && kraken.getPosition().getValueAsDouble() <= Constants.Shoulder.PosHigh+Constants.Shoulder.Buffer ? SmartDashboard.putBoolean("High Position", true) : SmartDashboard.putBoolean("High Position", false)) {} 
        if (kraken.getPosition().getValueAsDouble() >= Constants.Shoulder.PosLow-Constants.Shoulder.Buffer && kraken.getPosition().getValueAsDouble() <= Constants.Shoulder.PosLow+Constants.Shoulder.Buffer ? SmartDashboard.putBoolean("Low Position", true) : SmartDashboard.putBoolean("Low Position", false)) {}
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void runMotorLow() {
        kraken.setControl(m_positionVoltage.withPosition(Constants.Shoulder.PosLow));
        SmartDashboard.putNumber("Kraken Position", kraken.getPosition().getValueAsDouble());
        if (kraken.getPosition().getValueAsDouble() >= Constants.Shoulder.PosMedium-Constants.Shoulder.Buffer && kraken.getPosition().getValueAsDouble() <= Constants.Shoulder.PosMedium+Constants.Shoulder.Buffer ? SmartDashboard.putBoolean("Medium Position", true) : SmartDashboard.putBoolean("Medium Position", false)) {} 
        if (kraken.getPosition().getValueAsDouble() >= Constants.Shoulder.PosHigh-Constants.Shoulder.Buffer && kraken.getPosition().getValueAsDouble() <= Constants.Shoulder.PosHigh+Constants.Shoulder.Buffer ? SmartDashboard.putBoolean("High Position", true) : SmartDashboard.putBoolean("High Position", false)) {} 
        if (kraken.getPosition().getValueAsDouble() >= Constants.Shoulder.PosLow-Constants.Shoulder.Buffer && kraken.getPosition().getValueAsDouble() <= Constants.Shoulder.PosLow+Constants.Shoulder.Buffer ? SmartDashboard.putBoolean("Low Position", true) : SmartDashboard.putBoolean("Low Position", false)) {}
    }

    public void runMotorMedium() {
        kraken.setControl(m_positionVoltage.withPosition(Constants.Shoulder.PosMedium));
        SmartDashboard.putNumber("Kraken Position", kraken.getPosition().getValueAsDouble());
        if (kraken.getPosition().getValueAsDouble() >= Constants.Shoulder.PosMedium-Constants.Shoulder.Buffer && kraken.getPosition().getValueAsDouble() <= Constants.Shoulder.PosMedium+Constants.Shoulder.Buffer ? SmartDashboard.putBoolean("Medium Position", true) : SmartDashboard.putBoolean("Medium Position", false)) {} 
        if (kraken.getPosition().getValueAsDouble() >= Constants.Shoulder.PosHigh-Constants.Shoulder.Buffer && kraken.getPosition().getValueAsDouble() <= Constants.Shoulder.PosHigh+Constants.Shoulder.Buffer ? SmartDashboard.putBoolean("High Position", true) : SmartDashboard.putBoolean("High Position", false)) {} 
        if (kraken.getPosition().getValueAsDouble() >= Constants.Shoulder.PosLow-Constants.Shoulder.Buffer && kraken.getPosition().getValueAsDouble() <= Constants.Shoulder.PosLow+Constants.Shoulder.Buffer ? SmartDashboard.putBoolean("Low Position", true) : SmartDashboard.putBoolean("Low Position", false)) {}
        
    }

    public void runMotorHigh() {
        kraken.setControl(m_positionVoltage.withPosition(Constants.Shoulder.PosHigh));
        SmartDashboard.putNumber("Kraken Position", kraken.getPosition().getValueAsDouble());
        if (kraken.getPosition().getValueAsDouble() >= Constants.Shoulder.PosMedium-Constants.Shoulder.Buffer && kraken.getPosition().getValueAsDouble() <= Constants.Shoulder.PosMedium+Constants.Shoulder.Buffer ? SmartDashboard.putBoolean("Medium Position", true) : SmartDashboard.putBoolean("Medium Position", false)) {} 
        if (kraken.getPosition().getValueAsDouble() >= Constants.Shoulder.PosHigh-Constants.Shoulder.Buffer && kraken.getPosition().getValueAsDouble() <= Constants.Shoulder.PosHigh+Constants.Shoulder.Buffer ? SmartDashboard.putBoolean("High Position", true) : SmartDashboard.putBoolean("High Position", false)) {} 
        if (kraken.getPosition().getValueAsDouble() >= Constants.Shoulder.PosLow-Constants.Shoulder.Buffer && kraken.getPosition().getValueAsDouble() <= Constants.Shoulder.PosLow+Constants.Shoulder.Buffer ? SmartDashboard.putBoolean("Low Position", true) : SmartDashboard.putBoolean("Low Position", false)) {}
    }
    
}

